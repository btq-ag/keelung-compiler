# modified from https://github.com/simonmichael/hledger/blob/master/.github/workflows/linux.yml

name: CI (all platforms)

on: [push, pull_request]

jobs:
  linux:
    runs-on: ubuntu-latest
    steps:

    - name: 📥 Checkout repository
      uses: actions/checkout@v2
    # Make sure the @v0.5.4 matches the current version of the
    # action 
    - uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.KEELUNG_CI }}

    # things to be cached/restored:

    - name: 💾 Cache GHCup
      id:   stack-global
      uses: actions/cache@v2
      with:
        path: ~/.ghcup
        key: ${{ runner.os }}-ghcup-global-${{ matrix.plan.ghc }}-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-ghcup-global-${{ matrix.plan.ghc }}
    - name: 💾 Cache stack global package db
      id:   ghcup-global
      uses: actions/cache@v2
      with:
        path: ~/.stack
        key: ${{ runner.os }}-stack-global-${{ matrix.plan.ghc }}-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-stack-global-${{ matrix.plan.ghc }}
    - name: 💾 Cache stack-installed programs in ~/.local/bin
      id:   stack-programs
      uses: actions/cache@v2
      with:
        path: ~/.local/bin
        key: ${{ runner.os }}-stack-programs-${{ matrix.plan.ghc }}-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-stack-programs-${{ matrix.plan.ghc }}
    - name: 💾 Cache .stack-work
      uses: actions/cache@v2
      with:
        path: .stack-work
        key: ${{ runner.os }}-stack-work-${{ matrix.plan.ghc }}-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-stack-work-${{ matrix.plan.ghc }}
    - name: 💾 Cache dist-newstyle
      id:   dist-newstyle
      uses: actions/cache@v2
      with:
        path: dist-newstyle
        key: ${{ runner.os }}-cabal-${{ matrix.plan.ghc }}-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-cabal-global-${{ matrix.plan.ghc }}
    - name: 💾 Cache keelung-compiler/.stack-work
      uses: actions/cache@v2
      with:
        path: keelung-compiler/.stack-work
        key: ${{ runner.os }}-keelung-compiler-stack-work-${{ matrix.plan.ghc }}-${{ hashFiles('keelung-compiler/package.yaml') }}
        restore-keys: |
             ${{ runner.os }}-keelung-compiler-stack-work-${{ matrix.plan.ghc }}
    # actions:


    - name: ⏬ Install GHCup & GHC & stack & cabal
      run: |
        mkdir -p ~/.local/bin
        export PATH=~/.stack/bin:~/.cabal/bin:~/.ghcup/bin:~/.local/bin:$PATH
        # curl -sL https://get.haskellstack.org/stable/linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'; chmod a+x ~/.local/bin/stack
        if [[ ! -x ~/.ghcup/bin/stack ]]; then curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh; ghcup install ghc; ghcup install stack; ghcup install cabal; fi
        stack --version
    - name: ⏬ Install dependencies
      run: |
        stack build --only-dependencies
    - name: 🔨 Build and run tests
      run: |
        stack test

    - name: Build with cabal for license report
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        cabal update
        cabal new-build

    - name: Install cabal-plan
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        cabal install cabal-plan --flags="exe license-report"

    - name: Generate license report
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        export PATH=/home/runner/.cabal/bin:$PATH
        cabal-plan license-report keelung-compiler > LICENSES.md
    
    - name: Upload license report to artifact
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-artifact@v2
      with:
        name: keelung-compiler-license-report
        path: LICENSES.md
    - name: 📦 Compress files
      id: zip
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        # locate the executable 
        executable=$(find $(stack path --local-install-root)/bin -name "keelungc")
        # make a temporary directory for compresssing
        mkdir zip
        cp $executable zip/
        cp LICENSES.md zip/
        # compress
        cd zip 
        zip -r keelungc-ubuntu.zip *
        cd .. 
        mv zip/keelungc-ubuntu.zip .
    - name: 🚢 Release Artifacts
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        files: keelungc-ubuntu.zip
        repository: btq-ag/keelung-compiler
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: true
        prerelease: true

  windows:
    needs: linux
    runs-on: windows-latest
    steps:

    - name: 📥 Checkout repository
      uses: actions/checkout@v2

    # Make sure the @v0.5.4 matches the current version of the
    # action 
    - uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.KEELUNG_CI }}

    # things to be cached/restored:

    - name: 💾 Cache stack global package db
      id:   stack-global-package-db
      uses: actions/cache@v2
      with:
        path: C:\Users\runneradmin\AppData\Roaming\stack\
        key: ${{ runner.os }}-appdata-roaming-stack-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-appdata-roaming-stack
    - name: 💾 Cache stack programs dir   # ghc, ghc-included packages and their haddocks, mingw, msys2
      id:   stack-programs-dir
      uses: actions/cache@v2
      with:
        path: C:\Users\runneradmin\AppData\Local\Programs\stack\
        # which files signal a change in stack's global db ?
        # **.yaml includes */package.yaml and stack.yaml* (too many), and hopefully no other changing yamls
        key: ${{ runner.os }}-appdata-local-programs-stack-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-appdata-local-programs-stack
    - name: 💾 Cache .stack-work
      uses: actions/cache@v2
      with:
        path: .stack-work
        key: ${{ runner.os }}-stack-work-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-stack-work
    - name: 💾 Cache keelung-compiler/.stack-work
      uses: actions/cache@v2
      with:
        path: keelung-compiler/.stack-work
        key: ${{ runner.os }}-keelung-compiler-stack-work-${{ hashFiles('keelung-compiler/package.yaml') }}
        restore-keys: |
             ${{ runner.os }}-keelung-compiler-stack-work

    # actions 
    
    - name: ⏬ Install stack
      #if: steps.stack-programs-dir.outputs.cache-hit != 'true'
      # this step is needed to get stack.exe into PATH, for now
      run: |
        curl -sL https://get.haskellstack.org/stable/windows-x86_64.zip -o stack.zip
        7z x stack.zip stack.exe
        which stack
        stack --version
        which ./stack
        ./stack --version
      # must avoid GHC versions broken on windows such as 8.8.3 with https://gitlab.haskell.org/ghc/ghc/issues/17926
      # current default stack.yaml uses GHC 8.8.4 which hopefully is ok

    - name: ⏬ Install GHC
      # if: steps.stack-programs-dir.outputs.cache-hit != 'true'
      # set PATH=C:\Users\runneradmin\AppData\Local\Programs\stack\local\bin;%PATH%
      run: |
        ./stack --no-terminal setup --install-ghc

    - name: 📸 Build Snapshot
      run: |
        ./stack build --no-terminal --only-snapshot -j1

    - name: 🧰 Build Dependencies
      run: |
        ./stack build --no-terminal --only-dependencies

    - name: 🔨 Build and run tests
      run: |
        ./stack test

    # artifacts:
    - name: Download report license
      uses: actions/download-artifact@v4.1.7
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        name: keelung-compiler-license-report
    
    - name: 📦 Compress executable and data files
      if: startsWith(github.ref, 'refs/tags/v') # so that only commits with a git tag would upload artifacts
      run: |
        # locate the executable 
        $local = (stack path --local-install-root)
        $executable = (ls $local\bin *keelungc.exe* -Recurse -File).FullName

        # make a temporary directory for compresssing
        mkdir zip
        cp $executable zip/
        cp LICENSES.md zip/

        # compress
        cd zip 
        Compress-Archive * keelungc-windows.zip
        cd .. 
        mv zip/keelungc-windows.zip .
             
    - name: 🚢 Release Artifacts
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/v') # so that only commits with a git tag would upload artifacts
      with:
        files: keelungc-windows.zip
        repository: btq-ag/keelung-compiler
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: true
        prerelease: true
  macos:
    needs: linux
    runs-on: macos-latest
    steps:

    - name: 📥 Checkout repository
      uses: actions/checkout@v2

    # Make sure the @v0.5.4 matches the current version of the
    # action 
    - uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.KEELUNG_CI }}

    # things to be cached/restored:

    - name: 💾 Cache stack global package db
      id:   stack-global
      uses: actions/cache@v2
      with:
        path: ~/.stack
        key: ${{ runner.os }}-stack-global-after20210110-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-stack-global-after202110110
    - name: 💾 Cache stack-installed programs in ~/.local/bin
      id:   stack-programs
      uses: actions/cache@v2
      with:
        path: ~/.local/bin
        key: ${{ runner.os }}-stack-programs-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-stack-programs
    - name: 💾 Cache .stack-work
      uses: actions/cache@v2
      with:
        path: .stack-work
        key: ${{ runner.os }}-stack-work-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-stack-work

    - name: 💾 Cache keelung-compiler/.stack-work
      uses: actions/cache@v2
      with:
        path: keelung-compiler/.stack-work
        key: ${{ runner.os }}-keelung-compiler-stack-work-${{ hashFiles('keelung-compiler/package.yaml') }}
        restore-keys: |
             ${{ runner.os }}-keelung-compiler-stack-work

    # actions:

    - name: ⏬ Install stack
      run: |
        mkdir -p ~/.local/bin
        export PATH=~/.local/bin:$PATH        
        # brew install gnu-tar; curl -sL https://get.haskellstack.org/stable/osx-x86_64.tar.gz | gtar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'; chmod a+x ~/.local/bin/stack
        if [[ ! -x ~/.local/bin/stack ]]; then brew install gnu-tar; curl -sL https://get.haskellstack.org/stable/osx-x86_64.tar.gz | gtar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'; chmod a+x ~/.local/bin/stack; fi
        stack --version

    - name: ⏬ Install GHC
      run: |
        stack setup --install-ghc

    - name: ⏬ Install dependencies
      run: |
        stack build --only-dependencies

    - name: 🔨 Build and run tests
      run: |
        stack test

    - name: Download report license
      uses: actions/download-artifact@v4.1.7
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        name: keelung-compiler-license-report

    - name: 📦 Compress files
      id: zip
      if: startsWith(github.ref, 'refs/tags/v') # so that only commits with a git tag would upload artifacts
      run: |
        # locate the executable 
        executable=$(find $(stack path --local-install-root)/bin -name "keelungc")

        # make a temporary directory for compresssing
        mkdir zip
        cp $executable zip/
        cp LICENSES.md zip/
        
        # compress
        cd zip 
        zip -r keelungc-macos.zip *
        cd .. 
        mv zip/keelungc-macos.zip .

    - name: 🚢 Release Artifacts
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/v') # so that only commits with a git tag would upload artifacts
      with:
        files: keelungc-macos.zip
        repository: btq-ag/keelung-compiler
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: true
        prerelease: true
